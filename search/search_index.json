{"config":{"lang":["en"],"min_search_length":2,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Index Diese Dokumentation dient zum Nachschlagen und Lernen von SQLite Befehlen f\u00fcr Sch\u00fclerinnen und Sch\u00fcler. Die hier aufgef\u00fchrten SQLite Befehle k\u00f6nnen mit Hilfe des online SQLite Editors SQLverine einfach umgesetzt werden. Bei den Codebeispielen wird auf der rechten Seite immer ein gr\u00fcner Pfeil angezeigt. Klickt man darauf, \u00f6ffnet sich sofort der SQLverine Editor, damit man den Code selbst testen kann. Zum Beispiel: SELECT * FROM schueler \u00dcberblick ...","title":"Index"},{"location":"#index","text":"Diese Dokumentation dient zum Nachschlagen und Lernen von SQLite Befehlen f\u00fcr Sch\u00fclerinnen und Sch\u00fcler. Die hier aufgef\u00fchrten SQLite Befehle k\u00f6nnen mit Hilfe des online SQLite Editors SQLverine einfach umgesetzt werden. Bei den Codebeispielen wird auf der rechten Seite immer ein gr\u00fcner Pfeil angezeigt. Klickt man darauf, \u00f6ffnet sich sofort der SQLverine Editor, damit man den Code selbst testen kann. Zum Beispiel: SELECT * FROM schueler","title":"Index"},{"location":"#uberblick","text":"...","title":"\u00dcberblick"},{"location":"aggregate/","text":"AGGREGATE Aggregatsfunktionen - GROUP BY ... Aggregatsfunktion Beschreibung COUNT(spaltenname) Z\u00e4hlt alle Eintr\u00e4ge die in der gew\u00e4hlten Spalte einen Wert haben. AVG(spaltenname) Berechnet den Durchschnitt aller gefundenen Werte. SUM(spaltenname) Summiert alle gefundenen Werte. MAX(spaltenname) Liefert den gr\u00f6\u00dften gefundenen Wert zur\u00fcck. MIN(spaltenname) Liefer den kleinsten gefundenen Wert zur\u00fcck. Aggregatsfunktionen berechnen ein Ergebnis aus einer Vielzahl von Werten. Aggregatsfunktionen werden h\u00e4ufig mit dem Gruppierungsbefehl GROUP BY im SELECT Befehl aufgerufen. SELECT Aggregatsfunktion(spaltenname) FROM tabellenname GROUP BY spaltenname Mit diesem Befehl werden Informationen aus mehreren Tabellen gleichzeitig abgefragt. Das Ergebnis wird \u00fcber die jeweiligen IDs verkn\u00fcpft. Beispiele: Tabelle 1: schueler id vorname nachname geburtsdatum klasse_id 1 Paul Weber 2009-07-12 1 2 Margot M\u00fcller 2008-11-19 2 3 Mahmud Al'hissi 2008-06-30 1 4 Sabrina Otto 2007-05-19 2 5 Ayse \u00dcn\u00fcl 2008-12-12 2 Befehl SELECT MAX(geburtsdatum), vorname FROM schueler Mit diesem Befehl wird der j\u00fcngste Sch\u00fcler*in gefunden, da nach dem gr\u00f6\u00dften Wert gesucht wird. Ergebnis: MAX(geburtsdatum) vorname 2009-07-12 Paul Befehl SELECT MIN(geburtsdatum), vorname FROM schueler Mit diesem Befehl wird der \u00e4lteste Sch\u00fcler*in gefunden, da nach dem kleinsten Wert gesucht wird. Ergebnis: MIN(geburtsdatum) vorname 2007-05-19 Sabrina Befehl SELECT COUNT(id) FROM schueler Mit diesem Befehl werden die Eintr\u00e4ge in der Spalte id gez\u00e4hlt und ausgegeben. Ergebnis: COUNT(id) 5 Befehl SELECT COUNT(id), klasse_id FROM schueler GROUP BY klasse_id Mit diesem Befehl werden die Eintr\u00e4ge nach der Spalte klasse_id gruppiert, dann gez\u00e4hlt und ausgegeben. Ergebnis: COUNT(id) klasse_id 2 1 3 2 HAVING - Ergebnisse einer Aggregatsfunktion einschr\u00e4nken SELECT Aggregatsfunktion(spaltenname) FROM tabellenname GROUP BY spaltenname HAVING Aggregatsfunktion(spaltenname) <Operator> <Wert> Der Befehl HAVING ersetzt bei einer Aggregatsfunktion den Befehl WHERE und \u00fcberpr\u00fcft, ob eine Bedingung zutrifft. Befehl SELECT COUNT(id), klasse_id FROM schueler GROUP BY klasse_id HAVING COUNT(id) > 2 Mit diesem Befehl werden die Eintr\u00e4ge nach der Spalte klasse_id gruppiert, die gruppierten Sch\u00fcler innen gez\u00e4hlt und das Ergebnis nur ausgegegen, wenn in der Klasse mehr als 2 Sch\u00fcler innen sind. Ergebnis: COUNT(id) klasse_id 3 2","title":"AGGREGATE"},{"location":"aggregate/#aggregate","text":"","title":"AGGREGATE"},{"location":"aggregate/#aggregatsfunktionen-group-by","text":"Aggregatsfunktion Beschreibung COUNT(spaltenname) Z\u00e4hlt alle Eintr\u00e4ge die in der gew\u00e4hlten Spalte einen Wert haben. AVG(spaltenname) Berechnet den Durchschnitt aller gefundenen Werte. SUM(spaltenname) Summiert alle gefundenen Werte. MAX(spaltenname) Liefert den gr\u00f6\u00dften gefundenen Wert zur\u00fcck. MIN(spaltenname) Liefer den kleinsten gefundenen Wert zur\u00fcck. Aggregatsfunktionen berechnen ein Ergebnis aus einer Vielzahl von Werten. Aggregatsfunktionen werden h\u00e4ufig mit dem Gruppierungsbefehl GROUP BY im SELECT Befehl aufgerufen. SELECT Aggregatsfunktion(spaltenname) FROM tabellenname GROUP BY spaltenname Mit diesem Befehl werden Informationen aus mehreren Tabellen gleichzeitig abgefragt. Das Ergebnis wird \u00fcber die jeweiligen IDs verkn\u00fcpft.","title":"Aggregatsfunktionen - GROUP BY ..."},{"location":"aggregate/#beispiele","text":"Tabelle 1: schueler id vorname nachname geburtsdatum klasse_id 1 Paul Weber 2009-07-12 1 2 Margot M\u00fcller 2008-11-19 2 3 Mahmud Al'hissi 2008-06-30 1 4 Sabrina Otto 2007-05-19 2 5 Ayse \u00dcn\u00fcl 2008-12-12 2","title":"Beispiele:"},{"location":"aggregate/#befehl","text":"SELECT MAX(geburtsdatum), vorname FROM schueler Mit diesem Befehl wird der j\u00fcngste Sch\u00fcler*in gefunden, da nach dem gr\u00f6\u00dften Wert gesucht wird.","title":"Befehl"},{"location":"aggregate/#ergebnis","text":"MAX(geburtsdatum) vorname 2009-07-12 Paul","title":"Ergebnis:"},{"location":"aggregate/#befehl_1","text":"SELECT MIN(geburtsdatum), vorname FROM schueler Mit diesem Befehl wird der \u00e4lteste Sch\u00fcler*in gefunden, da nach dem kleinsten Wert gesucht wird.","title":"Befehl"},{"location":"aggregate/#ergebnis_1","text":"MIN(geburtsdatum) vorname 2007-05-19 Sabrina","title":"Ergebnis:"},{"location":"aggregate/#befehl_2","text":"SELECT COUNT(id) FROM schueler Mit diesem Befehl werden die Eintr\u00e4ge in der Spalte id gez\u00e4hlt und ausgegeben.","title":"Befehl"},{"location":"aggregate/#ergebnis_2","text":"COUNT(id) 5","title":"Ergebnis:"},{"location":"aggregate/#befehl_3","text":"SELECT COUNT(id), klasse_id FROM schueler GROUP BY klasse_id Mit diesem Befehl werden die Eintr\u00e4ge nach der Spalte klasse_id gruppiert, dann gez\u00e4hlt und ausgegeben.","title":"Befehl"},{"location":"aggregate/#ergebnis_3","text":"COUNT(id) klasse_id 2 1 3 2","title":"Ergebnis:"},{"location":"aggregate/#having-ergebnisse-einer-aggregatsfunktion-einschranken","text":"SELECT Aggregatsfunktion(spaltenname) FROM tabellenname GROUP BY spaltenname HAVING Aggregatsfunktion(spaltenname) <Operator> <Wert> Der Befehl HAVING ersetzt bei einer Aggregatsfunktion den Befehl WHERE und \u00fcberpr\u00fcft, ob eine Bedingung zutrifft.","title":"HAVING - Ergebnisse einer Aggregatsfunktion einschr\u00e4nken"},{"location":"aggregate/#befehl_4","text":"SELECT COUNT(id), klasse_id FROM schueler GROUP BY klasse_id HAVING COUNT(id) > 2 Mit diesem Befehl werden die Eintr\u00e4ge nach der Spalte klasse_id gruppiert, die gruppierten Sch\u00fcler innen gez\u00e4hlt und das Ergebnis nur ausgegegen, wenn in der Klasse mehr als 2 Sch\u00fcler innen sind.","title":"Befehl"},{"location":"aggregate/#ergebnis_4","text":"COUNT(id) klasse_id 3 2","title":"Ergebnis:"},{"location":"alter/","text":"TABLE: ALTER Spalte einer Tabelle hinzuf\u00fcgen ALTER TABLE tabellenname ADD spaltenname <DATENTYP> Dieser Befehl f\u00fcgt einer Tabelle eine neue Spalte hinzu. Beispiel: Tabelle: schueler id vorname nachname geburtsdatum klasse_id fehltage Befehl: ALTER TABLE schueler ADD geburtsort TEXT Ergebnis: id vorname nachname geburtsdatum klasse_id fehltage geburtsort Spalte einer Tabelle l\u00f6schen ALTER TABLE tabellenname DROP COLUMN spaltenname <DATENTYP> Dieser Befehl l\u00f6scht eine Spalte einer Tabelle. Beispiel: Tabelle: schueler id vorname nachname geburtsdatum klasse_id fehltage geburtsort Befehl: ALTER TABLE schueler DROP COLUMN geburtsort Ergebnis: id vorname nachname geburtsdatum klasse_id fehltage Spalte/Tabelle umbennen ALTER TABLE tabellenname RENAME TO tabellenname_neu Dieser Befehl benennt eine Tabelle um. ALTER TABLE tabellenname RENAME spaltenname TO spaltenname_neu Dieser Befehl benennt eine Spalte in der Tabelle um. Beispiel 1: Tabelle: schueler id vorname nachname geburtsdatum klasse_id fehltage geburtsort Befehl: ALTER TABLE schueler RENAME fehltage TO absenzen Dieser Befehl benennt die Spalte fehltage der Tabelle schueler in absenzen um. Ergebnis: id vorname nachname geburtsdatum klasse_id absenzen geburtsort Beispiel 2: ALTER TABLE lehrer RENAME TO lehrkraefte Dieser Befehl benennt die Tabelle lehrer in lehrkraefte um.","title":"ALTER"},{"location":"alter/#table-alter","text":"","title":"TABLE: ALTER"},{"location":"alter/#spalte-einer-tabelle-hinzufugen","text":"ALTER TABLE tabellenname ADD spaltenname <DATENTYP> Dieser Befehl f\u00fcgt einer Tabelle eine neue Spalte hinzu.","title":"Spalte einer Tabelle hinzuf\u00fcgen"},{"location":"alter/#beispiel","text":"Tabelle: schueler id vorname nachname geburtsdatum klasse_id fehltage","title":"Beispiel:"},{"location":"alter/#befehl","text":"ALTER TABLE schueler ADD geburtsort TEXT","title":"Befehl:"},{"location":"alter/#ergebnis","text":"id vorname nachname geburtsdatum klasse_id fehltage geburtsort","title":"Ergebnis:"},{"location":"alter/#spalte-einer-tabelle-loschen","text":"ALTER TABLE tabellenname DROP COLUMN spaltenname <DATENTYP> Dieser Befehl l\u00f6scht eine Spalte einer Tabelle.","title":"Spalte einer Tabelle l\u00f6schen"},{"location":"alter/#beispiel_1","text":"Tabelle: schueler id vorname nachname geburtsdatum klasse_id fehltage geburtsort","title":"Beispiel:"},{"location":"alter/#befehl_1","text":"ALTER TABLE schueler DROP COLUMN geburtsort","title":"Befehl:"},{"location":"alter/#ergebnis_1","text":"id vorname nachname geburtsdatum klasse_id fehltage","title":"Ergebnis:"},{"location":"alter/#spaltetabelle-umbennen","text":"ALTER TABLE tabellenname RENAME TO tabellenname_neu Dieser Befehl benennt eine Tabelle um. ALTER TABLE tabellenname RENAME spaltenname TO spaltenname_neu Dieser Befehl benennt eine Spalte in der Tabelle um.","title":"Spalte/Tabelle umbennen"},{"location":"alter/#beispiel-1","text":"Tabelle: schueler id vorname nachname geburtsdatum klasse_id fehltage geburtsort","title":"Beispiel 1:"},{"location":"alter/#befehl_2","text":"ALTER TABLE schueler RENAME fehltage TO absenzen Dieser Befehl benennt die Spalte fehltage der Tabelle schueler in absenzen um.","title":"Befehl:"},{"location":"alter/#ergebnis_2","text":"id vorname nachname geburtsdatum klasse_id absenzen geburtsort","title":"Ergebnis:"},{"location":"alter/#beispiel-2","text":"ALTER TABLE lehrer RENAME TO lehrkraefte Dieser Befehl benennt die Tabelle lehrer in lehrkraefte um.","title":"Beispiel 2:"},{"location":"create/","text":"TABLE: CREATE eine neue Tabelle zur Datenbank hinzuf\u00fcgen CREATE TABLE tabellenname ( spaltenname_1 <DATENTYP> <EINSCHR\u00c4NKUNG>, spaltenname_2 <DATENTYP> <EINSCHR\u00c4NKUNG>, ... <DATENTYP> <EINSCHR\u00c4NKUNG>, spaltenname_n <DATENTYP> <EINSCHR\u00c4NKUNG>, <WEITERE EINSCHR\u00c4NKUNG>, ... ) Erstellt eine neue Tabelle mit den angegebenen Spalten. Jede Spalte ben\u00f6tigt einen Datentyp, der angibt, welche Daten in dieser Spalte eingetragen werden k\u00f6nnen. Neben dem Datentyp k\u00f6nnen noch Einschr\u00e4nkungen hinzugef\u00fcgt werden. Jede Tabelle muss eine Spalte \"id\" mit dem Datentyp INTEGER und der Einschr\u00e4nkung PRIMARY KEY haben, damit jeder Zeile eine eindeutige Identifikationsnummer zugewiesen werden kann, die automatisch hochgez\u00e4hlt wird. Datentyp Erkl\u00e4rung INTEGER Ganzzahl REAL Gleitkommazahl TEXT Text BLOB H\u00e4lt Daten genau so, wie diese eingegeben wurden. Ideal z.B. f\u00fcr Dateien oder Bilder. In SQLite gibt es keinen Datentyp f\u00fcr Datumswerte. Diese speichern wir als Text nach ISO8601. Der Syntax hierzu ist YYYY-MM-DD, z.B. 2009-11-13. Einschr\u00e4nkung Erkl\u00e4rung UNIQUE Jeder Wert dieser Spalte darf nur einmal vorkommen. PRIMARY KEY Definiert die Werte einer Spalte als Prim\u00e4rschl\u00fcssel, anhand derer jede Zeile eindeutig identifizierbar wird. Sie sind automatisch UNIQUE. FOREIGN KEY Definiert die Werte einer Spalte als Fremdschl\u00fcssel. NOT NULL Legt fest, dass die Werte einer Spalte nicht leer sein d\u00fcrfen. DEFAULT Legt einen Standartwert f\u00fcr die Spalte fest, wenn kein Wert eingetragen wird. Beispiel 1: Befehl CREATE TABLE \"lehrer\" ( \"id\" INTEGER PRIMARY KEY, \"vorname\" TEXT, \"nachname\" TEXT ) Mit diesem Befehl wird eine Tabelle mit dem Namen lehrer angelegt, die zwei Spalten als TEXT sowie eine Spalte id mit dem Datentyp INTEGER und der Einschr\u00e4nkung PRIMARY KEY hat. Ergebnis: Tabelle: lehrer id vorname nachname Die neu erstellte Tabelle hat noch keine Eintr\u00e4ge, diese k\u00f6nnen mit dem INSERT INTO-Befehl eingef\u00fcgt werden. Beispiel 2: Befehl CREATE TABLE \"klassen\" ( \"id\" INTEGER PRIMARY KEY, \"name\" TEXT, \"jahrgangsstufe\" INTEGER, \"lehrer_id\" INTEGER, FOREIGN KEY \"lehrer_id\" REFERENCES \"lehrer\"(\"id\") ) Mit diesem Befehl wird eine Tabelle mit dem Namen klassen angelegt, die mehrere Spalten als TEXT und als INTEGER hat sowie eine Spalte id, mit der Einschr\u00e4nkung PRIMARY KEY. Am Ende des Befehls wird eine Referenz auf eine zweite Tabelle klassen, auf die Spalte id gesetzt. Dieser Verweis verbindet eindeutig Eintr\u00e4ge, die \u00fcber mehrere Tabellen hinweg verteilt sind. Beispiel: eine Klasse ist genau einem bestimmten Lehrer zugeordnet. Ergebnis: Tabelle 2: klassen id name jahrgangsstufe lehrer_id","title":"CREATE"},{"location":"create/#table-create","text":"","title":"TABLE: CREATE"},{"location":"create/#eine-neue-tabelle-zur-datenbank-hinzufugen","text":"CREATE TABLE tabellenname ( spaltenname_1 <DATENTYP> <EINSCHR\u00c4NKUNG>, spaltenname_2 <DATENTYP> <EINSCHR\u00c4NKUNG>, ... <DATENTYP> <EINSCHR\u00c4NKUNG>, spaltenname_n <DATENTYP> <EINSCHR\u00c4NKUNG>, <WEITERE EINSCHR\u00c4NKUNG>, ... ) Erstellt eine neue Tabelle mit den angegebenen Spalten. Jede Spalte ben\u00f6tigt einen Datentyp, der angibt, welche Daten in dieser Spalte eingetragen werden k\u00f6nnen. Neben dem Datentyp k\u00f6nnen noch Einschr\u00e4nkungen hinzugef\u00fcgt werden. Jede Tabelle muss eine Spalte \"id\" mit dem Datentyp INTEGER und der Einschr\u00e4nkung PRIMARY KEY haben, damit jeder Zeile eine eindeutige Identifikationsnummer zugewiesen werden kann, die automatisch hochgez\u00e4hlt wird.","title":"eine neue Tabelle zur Datenbank hinzuf\u00fcgen"},{"location":"create/#_1","text":"Datentyp Erkl\u00e4rung INTEGER Ganzzahl REAL Gleitkommazahl TEXT Text BLOB H\u00e4lt Daten genau so, wie diese eingegeben wurden. Ideal z.B. f\u00fcr Dateien oder Bilder. In SQLite gibt es keinen Datentyp f\u00fcr Datumswerte. Diese speichern wir als Text nach ISO8601. Der Syntax hierzu ist YYYY-MM-DD, z.B. 2009-11-13.","title":""},{"location":"create/#_2","text":"Einschr\u00e4nkung Erkl\u00e4rung UNIQUE Jeder Wert dieser Spalte darf nur einmal vorkommen. PRIMARY KEY Definiert die Werte einer Spalte als Prim\u00e4rschl\u00fcssel, anhand derer jede Zeile eindeutig identifizierbar wird. Sie sind automatisch UNIQUE. FOREIGN KEY Definiert die Werte einer Spalte als Fremdschl\u00fcssel. NOT NULL Legt fest, dass die Werte einer Spalte nicht leer sein d\u00fcrfen. DEFAULT Legt einen Standartwert f\u00fcr die Spalte fest, wenn kein Wert eingetragen wird.","title":""},{"location":"create/#beispiel-1","text":"","title":"Beispiel 1:"},{"location":"create/#befehl","text":"CREATE TABLE \"lehrer\" ( \"id\" INTEGER PRIMARY KEY, \"vorname\" TEXT, \"nachname\" TEXT ) Mit diesem Befehl wird eine Tabelle mit dem Namen lehrer angelegt, die zwei Spalten als TEXT sowie eine Spalte id mit dem Datentyp INTEGER und der Einschr\u00e4nkung PRIMARY KEY hat.","title":"Befehl"},{"location":"create/#ergebnis","text":"Tabelle: lehrer id vorname nachname Die neu erstellte Tabelle hat noch keine Eintr\u00e4ge, diese k\u00f6nnen mit dem INSERT INTO-Befehl eingef\u00fcgt werden.","title":"Ergebnis:"},{"location":"create/#beispiel-2","text":"","title":"Beispiel 2:"},{"location":"create/#befehl_1","text":"CREATE TABLE \"klassen\" ( \"id\" INTEGER PRIMARY KEY, \"name\" TEXT, \"jahrgangsstufe\" INTEGER, \"lehrer_id\" INTEGER, FOREIGN KEY \"lehrer_id\" REFERENCES \"lehrer\"(\"id\") ) Mit diesem Befehl wird eine Tabelle mit dem Namen klassen angelegt, die mehrere Spalten als TEXT und als INTEGER hat sowie eine Spalte id, mit der Einschr\u00e4nkung PRIMARY KEY. Am Ende des Befehls wird eine Referenz auf eine zweite Tabelle klassen, auf die Spalte id gesetzt. Dieser Verweis verbindet eindeutig Eintr\u00e4ge, die \u00fcber mehrere Tabellen hinweg verteilt sind. Beispiel: eine Klasse ist genau einem bestimmten Lehrer zugeordnet.","title":"Befehl"},{"location":"create/#ergebnis_1","text":"Tabelle 2: klassen id name jahrgangsstufe lehrer_id","title":"Ergebnis:"},{"location":"delete/","text":"DELETE alle Eintr\u00e4ge einer Tabelle l\u00f6schen DELETE FROM tabellenname Dieser Befehl l\u00f6scht alle Eintr\u00e4ge einer Tabelle. Beispiel: Tabelle 1: schueler id vorname nachname geburtsdatum klasse_id fehltage 1 Paul Weber 2009-07-12 1 25 2 Margot M\u00fcller 2008-11-19 2 5 3 Mahmud Al'hissi 2008-06-30 1 6 4 Sabrina Otto 2007-05-19 2 0 5 Ayse \u00dcn\u00fcl 2008-12-12 2 3 Befehl DELETE FROM schueler Mit diesem Befehl werden alle Sch\u00fcler*innen der Schule gel\u00f6scht. Ergebnis: id vorname nachname geburtsdatum klasse_id fehltage bestimmte Eintr\u00e4ge einer Tabelle l\u00f6schen DELETE FROM tabellenname WHERE spaltenname <Operator> <Wert> Dieser Befehl l\u00f6scht alle Eintr\u00e4ge einer Tabelle, die mit Hilfe von WHERE und einer passenden Bedingung gew\u00e4hlt werden. Beispiel: Tabelle 1: schueler id vorname nachname geburtsdatum klasse_id fehltage 1 Paul Weber 2009-07-12 1 25 2 Margot M\u00fcller 2008-11-19 2 5 3 Mahmud Al'hissi 2008-06-30 1 6 4 Sabrina Otto 2007-05-19 2 0 5 Ayse \u00dcn\u00fcl 2008-12-12 2 3 Befehl DELETE FROM schueler WHERE vorname LIKE 'Ma%' Mit diesem Befehl werden alle Sch\u00fcler*innen der Schule gel\u00f6scht, deren Vorname mit \"Ma\" beginnt. Ergebnis: id vorname nachname geburtsdatum klasse_id fehltage 1 Paul Weber 2009-07-12 1 25 4 Sabrina Otto 2007-05-19 2 0 5 Ayse \u00dcn\u00fcl 2008-12-12 2 3","title":"DELETE"},{"location":"delete/#delete","text":"","title":"DELETE"},{"location":"delete/#alle-eintrage-einer-tabelle-loschen","text":"DELETE FROM tabellenname Dieser Befehl l\u00f6scht alle Eintr\u00e4ge einer Tabelle.","title":"alle Eintr\u00e4ge einer Tabelle l\u00f6schen"},{"location":"delete/#beispiel","text":"Tabelle 1: schueler id vorname nachname geburtsdatum klasse_id fehltage 1 Paul Weber 2009-07-12 1 25 2 Margot M\u00fcller 2008-11-19 2 5 3 Mahmud Al'hissi 2008-06-30 1 6 4 Sabrina Otto 2007-05-19 2 0 5 Ayse \u00dcn\u00fcl 2008-12-12 2 3","title":"Beispiel:"},{"location":"delete/#befehl","text":"DELETE FROM schueler Mit diesem Befehl werden alle Sch\u00fcler*innen der Schule gel\u00f6scht.","title":"Befehl"},{"location":"delete/#ergebnis","text":"id vorname nachname geburtsdatum klasse_id fehltage","title":"Ergebnis:"},{"location":"delete/#bestimmte-eintrage-einer-tabelle-loschen","text":"DELETE FROM tabellenname WHERE spaltenname <Operator> <Wert> Dieser Befehl l\u00f6scht alle Eintr\u00e4ge einer Tabelle, die mit Hilfe von WHERE und einer passenden Bedingung gew\u00e4hlt werden.","title":"bestimmte Eintr\u00e4ge einer Tabelle l\u00f6schen"},{"location":"delete/#beispiel_1","text":"Tabelle 1: schueler id vorname nachname geburtsdatum klasse_id fehltage 1 Paul Weber 2009-07-12 1 25 2 Margot M\u00fcller 2008-11-19 2 5 3 Mahmud Al'hissi 2008-06-30 1 6 4 Sabrina Otto 2007-05-19 2 0 5 Ayse \u00dcn\u00fcl 2008-12-12 2 3","title":"Beispiel:"},{"location":"delete/#befehl_1","text":"DELETE FROM schueler WHERE vorname LIKE 'Ma%' Mit diesem Befehl werden alle Sch\u00fcler*innen der Schule gel\u00f6scht, deren Vorname mit \"Ma\" beginnt.","title":"Befehl"},{"location":"delete/#ergebnis_1","text":"id vorname nachname geburtsdatum klasse_id fehltage 1 Paul Weber 2009-07-12 1 25 4 Sabrina Otto 2007-05-19 2 0 5 Ayse \u00dcn\u00fcl 2008-12-12 2 3","title":"Ergebnis:"},{"location":"drop/","text":"TABLE: DROP Tabelle l\u00f6schen DROP TABLE tabellenname Dieser Befehl l\u00f6scht eine Tabelle. Beispiel: DROP TABLE schueler So wird die Tabelle schueler samt Inhalt gel\u00f6scht.","title":"DROP"},{"location":"drop/#table-drop","text":"","title":"TABLE: DROP"},{"location":"drop/#tabelle-loschen","text":"DROP TABLE tabellenname Dieser Befehl l\u00f6scht eine Tabelle.","title":"Tabelle l\u00f6schen"},{"location":"drop/#beispiel","text":"DROP TABLE schueler So wird die Tabelle schueler samt Inhalt gel\u00f6scht.","title":"Beispiel:"},{"location":"insert/","text":"INSERT eine neue Zeile einer Tabelle hinzuf\u00fcgen INSERT INTO tabellenname (spaltenname_1, spaltenname_2, ..., spaltenname_n) VALUES (<wert_1>, <wert_2>, ..., <wert_n>) Mit dem INSERT INTO Befehl wird eine neue Zeile einer Tabelle hinzugef\u00fcgt. Neben dem Tabellennamen m\u00fcssen alle zu bef\u00fcllenden Spaltennamen der Tabelle in Klammern dahinter eingetragen werden. Nur die Spalte \"id\", die automatisch hochgez\u00e4hlt wird und einzigartig sein muss, wird nicht mit aufgef\u00fchrt. Bei VALUES m\u00fcssen die Werte in der richtigen Reihenfolge, passend der Reihenfolge der Spaltennamen, eingetragen werden. Beispiel: Tabelle 1: schueler id vorname nachname geburtsdatum klasse_id fehltage 1 Paul Weber 2009-07-12 1 25 2 Margot M\u00fcller 2008-11-19 2 5 3 Mahmud Al'hissi 2008-06-30 1 6 4 Sabrina Otto 2007-05-19 2 0 5 Ayse \u00dcn\u00fcl 2008-12-12 2 3 Befehl INSERT INTO tabellenname (vorname, nachname, geburtsdatum, klasse_id, fehltage) VALUES ('Ullrich', 'Gcheuder', '2006-07-05', 3, 20) Mit diesem Befehl wird ein weiterer Sch\u00fcler angelegt. Ergebnis: id vorname nachname geburtsdatum klasse_id fehltage 1 Paul Weber 2009-07-12 1 25 2 Margot M\u00fcller 2008-11-19 2 5 3 Mahmud Al'hissi 2008-06-30 1 6 4 Sabrina Otto 2007-05-19 2 0 5 Ayse \u00dcn\u00fcl 2008-12-12 2 3 6 Ullrich Gcheuder 2006-07-05 3 20","title":"INSERT"},{"location":"insert/#insert","text":"","title":"INSERT"},{"location":"insert/#eine-neue-zeile-einer-tabelle-hinzufugen","text":"INSERT INTO tabellenname (spaltenname_1, spaltenname_2, ..., spaltenname_n) VALUES (<wert_1>, <wert_2>, ..., <wert_n>) Mit dem INSERT INTO Befehl wird eine neue Zeile einer Tabelle hinzugef\u00fcgt. Neben dem Tabellennamen m\u00fcssen alle zu bef\u00fcllenden Spaltennamen der Tabelle in Klammern dahinter eingetragen werden. Nur die Spalte \"id\", die automatisch hochgez\u00e4hlt wird und einzigartig sein muss, wird nicht mit aufgef\u00fchrt. Bei VALUES m\u00fcssen die Werte in der richtigen Reihenfolge, passend der Reihenfolge der Spaltennamen, eingetragen werden.","title":"eine neue Zeile einer Tabelle hinzuf\u00fcgen"},{"location":"insert/#beispiel","text":"Tabelle 1: schueler id vorname nachname geburtsdatum klasse_id fehltage 1 Paul Weber 2009-07-12 1 25 2 Margot M\u00fcller 2008-11-19 2 5 3 Mahmud Al'hissi 2008-06-30 1 6 4 Sabrina Otto 2007-05-19 2 0 5 Ayse \u00dcn\u00fcl 2008-12-12 2 3","title":"Beispiel:"},{"location":"insert/#befehl","text":"INSERT INTO tabellenname (vorname, nachname, geburtsdatum, klasse_id, fehltage) VALUES ('Ullrich', 'Gcheuder', '2006-07-05', 3, 20) Mit diesem Befehl wird ein weiterer Sch\u00fcler angelegt.","title":"Befehl"},{"location":"insert/#ergebnis","text":"id vorname nachname geburtsdatum klasse_id fehltage 1 Paul Weber 2009-07-12 1 25 2 Margot M\u00fcller 2008-11-19 2 5 3 Mahmud Al'hissi 2008-06-30 1 6 4 Sabrina Otto 2007-05-19 2 0 5 Ayse \u00dcn\u00fcl 2008-12-12 2 3 6 Ullrich Gcheuder 2006-07-05 3 20","title":"Ergebnis:"},{"location":"join/","text":"JOIN Ergebnisse aus mehreren Tabellen SELECT tabellenname_1.spaltenname_1, tabellenname_2.spaltenname_1 FROM tabellename_1 JOIN tabellenname_2 ON tabellenname_2.id = tabellenname_1.tabellenname_2_id oder SELECT tabellenname_1.*, tabellenname_2.* FROM tabellename_1 JOIN tabellenname_2 ON tabellenname_2.id = tabellenname_1.tabellenname_2_id Mit diesem Befehl werden Informationen aus mehreren Tabellen gleichzeitig abgefragt. Das Ergebnis wird \u00fcber die jeweiligen IDs verkn\u00fcpft. Beispiel 1: Tabelle 1: schueler id vorname nachname geburtsdatum klasse_id 1 Paul Weber 2009-07-12 1 2 Margot M\u00fcller 2008-11-19 2 3 Mahmud Al'hissi 2008-06-30 1 4 Sabrina Otto 2007-05-19 2 5 Ayse \u00dcn\u00fcl 2008-12-12 2 Tabelle 2: klassen id name jahrgangsstufe lehrer_id 1 1 A 1 4 2 2 A 2 3 3 3 A 3 5 4 4 A GtK 4 7 5 4B 4 2 Befehl SELECT schueler.vorname, schueler.nachname, klassen.name FROM schueler JOIN klassen ON klasse.id = schueler.klassen_id Mit diesem Befehl wird abgefragt, welcher Sch\u00fcler*in in welcher Klasse ist. Ergebnis: schueler.vorname schueler.nachname klassen.name Paul Weber 1 A Margot M\u00fcller 2 A Mahmud Al'hissi 1 A Sabrina Otto 2 A Ayse \u00dcn\u00fcl 2 A Beispiel 2: Tabelle 1: schueler id vorname nachname geburtsdatum klasse_id 1 Paul Weber 2009-07-12 1 2 Margot M\u00fcller 2008-11-19 2 3 Mahmud Al'hissi 2008-06-30 1 4 Sabrina Otto 2007-05-19 2 5 Ayse \u00dcn\u00fcl 2008-12-12 2 Tabelle 2: klassen id name jahrgangsstufe lehrer_id 1 1 A 1 4 2 2 A 2 3 3 3 A 3 5 4 4 A GtK 4 7 5 4B 4 2 Tabelle 3: lehrer id vorname nachname 2 Peter M\u00fcller 3 Wolfgang Schmidt 4 Michael Schneider 5 Maria Fischer 7 Werner Geuder Befehl SELECT schueler.vorname, schueler.nachname, lehrer.vorname, lehrer.nachname FROM schueler JOIN klassen ON klasse.id = schueler.klassen_id JOIN lehrer ON lehrer.id = klassen.lehrer_id Mit diesem Befehl wird abgefragt, welcher Sch\u00fcler*in welche Klassenlehrkraft hat. Die drei Tabellen (schueler, klassen, lehrer) werden mittels JOIN miteinander verbunden. Ausgegeben werden aber nur die Spalten (aus Tabelle schueler und Tabelle lehrer), die im SELECT-Befehl eingetragen wurden. Ergebnis: schueler.vorname schueler.nachname lehrer.vorname lehrer.nachname Paul Weber Michael Schneider Margot M\u00fcller Wolfgang Schmidt Mahmud Al'hissi Michael Schneider Sabrina Otto Wolfgang Schmidt Ayse \u00dcn\u00fcl Wolfgang Schmidt","title":"JOIN"},{"location":"join/#join","text":"","title":"JOIN"},{"location":"join/#ergebnisse-aus-mehreren-tabellen","text":"SELECT tabellenname_1.spaltenname_1, tabellenname_2.spaltenname_1 FROM tabellename_1 JOIN tabellenname_2 ON tabellenname_2.id = tabellenname_1.tabellenname_2_id oder SELECT tabellenname_1.*, tabellenname_2.* FROM tabellename_1 JOIN tabellenname_2 ON tabellenname_2.id = tabellenname_1.tabellenname_2_id Mit diesem Befehl werden Informationen aus mehreren Tabellen gleichzeitig abgefragt. Das Ergebnis wird \u00fcber die jeweiligen IDs verkn\u00fcpft.","title":"Ergebnisse aus mehreren Tabellen"},{"location":"join/#beispiel-1","text":"Tabelle 1: schueler id vorname nachname geburtsdatum klasse_id 1 Paul Weber 2009-07-12 1 2 Margot M\u00fcller 2008-11-19 2 3 Mahmud Al'hissi 2008-06-30 1 4 Sabrina Otto 2007-05-19 2 5 Ayse \u00dcn\u00fcl 2008-12-12 2 Tabelle 2: klassen id name jahrgangsstufe lehrer_id 1 1 A 1 4 2 2 A 2 3 3 3 A 3 5 4 4 A GtK 4 7 5 4B 4 2","title":"Beispiel 1:"},{"location":"join/#befehl","text":"SELECT schueler.vorname, schueler.nachname, klassen.name FROM schueler JOIN klassen ON klasse.id = schueler.klassen_id Mit diesem Befehl wird abgefragt, welcher Sch\u00fcler*in in welcher Klasse ist.","title":"Befehl"},{"location":"join/#ergebnis","text":"schueler.vorname schueler.nachname klassen.name Paul Weber 1 A Margot M\u00fcller 2 A Mahmud Al'hissi 1 A Sabrina Otto 2 A Ayse \u00dcn\u00fcl 2 A","title":"Ergebnis:"},{"location":"join/#beispiel-2","text":"Tabelle 1: schueler id vorname nachname geburtsdatum klasse_id 1 Paul Weber 2009-07-12 1 2 Margot M\u00fcller 2008-11-19 2 3 Mahmud Al'hissi 2008-06-30 1 4 Sabrina Otto 2007-05-19 2 5 Ayse \u00dcn\u00fcl 2008-12-12 2 Tabelle 2: klassen id name jahrgangsstufe lehrer_id 1 1 A 1 4 2 2 A 2 3 3 3 A 3 5 4 4 A GtK 4 7 5 4B 4 2 Tabelle 3: lehrer id vorname nachname 2 Peter M\u00fcller 3 Wolfgang Schmidt 4 Michael Schneider 5 Maria Fischer 7 Werner Geuder","title":"Beispiel 2:"},{"location":"join/#befehl_1","text":"SELECT schueler.vorname, schueler.nachname, lehrer.vorname, lehrer.nachname FROM schueler JOIN klassen ON klasse.id = schueler.klassen_id JOIN lehrer ON lehrer.id = klassen.lehrer_id Mit diesem Befehl wird abgefragt, welcher Sch\u00fcler*in welche Klassenlehrkraft hat. Die drei Tabellen (schueler, klassen, lehrer) werden mittels JOIN miteinander verbunden. Ausgegeben werden aber nur die Spalten (aus Tabelle schueler und Tabelle lehrer), die im SELECT-Befehl eingetragen wurden.","title":"Befehl"},{"location":"join/#ergebnis_1","text":"schueler.vorname schueler.nachname lehrer.vorname lehrer.nachname Paul Weber Michael Schneider Margot M\u00fcller Wolfgang Schmidt Mahmud Al'hissi Michael Schneider Sabrina Otto Wolfgang Schmidt Ayse \u00dcn\u00fcl Wolfgang Schmidt","title":"Ergebnis:"},{"location":"limit/","text":"LIMIT Ausgabe einschr\u00e4nken SELECT * FROM tabellenname LIMIT <Anzahl> Mit diesem Befehl wird nur die angegebene Anzahl von Ergebnissen angezeigt. Beispiele: Befehl SELECT * FROM schueler LIMIT 2 Ergebnis: id vorname nachname geburtsdatum klasse_id 1 Paul Weber 2009-07-12 1 2 Margot M\u00fcller 2008-11-19 2 Eine Anzahl von Ergebnissen \u00fcberspringen SELECT * FROM tabellenname LIMIT <Anzahl> OFFSET <Anzahl> Mit diesem Befehl wird die angegebene Anzahl (LIMIT) der Ergebnisse ab dem angegeben Wert (OFFSET) angezeigt. Beispiele: Befehl SELECT * FROM schueler LIMIT 2 OFFSET 2 Ergebnis: id vorname nachname geburtsdatum klasse_id 3 Mahmud Al'hissi 2008-06-30 1 4 Sabrina Otto 2007-05-19 2","title":"LIMIT"},{"location":"limit/#limit","text":"","title":"LIMIT"},{"location":"limit/#ausgabe-einschranken","text":"SELECT * FROM tabellenname LIMIT <Anzahl> Mit diesem Befehl wird nur die angegebene Anzahl von Ergebnissen angezeigt.","title":"Ausgabe einschr\u00e4nken"},{"location":"limit/#beispiele","text":"","title":"Beispiele:"},{"location":"limit/#befehl","text":"SELECT * FROM schueler LIMIT 2","title":"Befehl"},{"location":"limit/#ergebnis","text":"id vorname nachname geburtsdatum klasse_id 1 Paul Weber 2009-07-12 1 2 Margot M\u00fcller 2008-11-19 2","title":"Ergebnis:"},{"location":"limit/#eine-anzahl-von-ergebnissen-uberspringen","text":"SELECT * FROM tabellenname LIMIT <Anzahl> OFFSET <Anzahl> Mit diesem Befehl wird die angegebene Anzahl (LIMIT) der Ergebnisse ab dem angegeben Wert (OFFSET) angezeigt.","title":"Eine Anzahl von Ergebnissen \u00fcberspringen"},{"location":"limit/#beispiele_1","text":"","title":"Beispiele:"},{"location":"limit/#befehl_1","text":"SELECT * FROM schueler LIMIT 2 OFFSET 2","title":"Befehl"},{"location":"limit/#ergebnis_1","text":"id vorname nachname geburtsdatum klasse_id 3 Mahmud Al'hissi 2008-06-30 1 4 Sabrina Otto 2007-05-19 2","title":"Ergebnis:"},{"location":"order/","text":"ORDER Ausgabe sortieren SELECT * FROM tabellenname ORDER BY spaltenname ASC Mit diesem Befehl wird das Ergebnis in aufsteigender (ASC) oder absteigender (DESC) Reihenfolge angezeigt. Beispiele: Befehl SELECT * FROM schueler ORDER BY geburtsdatum ASC Ergebnis: id vorname nachname geburtsdatum klasse_id 4 Sabrina Otto 2007-05-19 2 3 Mahmud Al'hissi 2008-06-30 1 2 Margot M\u00fcller 2008-11-19 2 5 Ayse \u00dcn\u00fcl 2008-12-12 2 1 Paul Weber 2009-07-12 1 Befehl SELECT * FROM schueler ORDER BY geburtsdatum DESC Ergebnis: id vorname nachname geburtsdatum klasse_id 1 Paul Weber 2009-07-12 1 5 Ayse \u00dcn\u00fcl 2008-12-12 2 2 Margot M\u00fcller 2008-11-19 2 3 Mahmud Al'hissi 2008-06-30 1 4 Sabrina Otto 2007-05-19 2","title":"ORDER"},{"location":"order/#order","text":"","title":"ORDER"},{"location":"order/#ausgabe-sortieren","text":"SELECT * FROM tabellenname ORDER BY spaltenname ASC Mit diesem Befehl wird das Ergebnis in aufsteigender (ASC) oder absteigender (DESC) Reihenfolge angezeigt.","title":"Ausgabe sortieren"},{"location":"order/#beispiele","text":"","title":"Beispiele:"},{"location":"order/#befehl","text":"SELECT * FROM schueler ORDER BY geburtsdatum ASC","title":"Befehl"},{"location":"order/#ergebnis","text":"id vorname nachname geburtsdatum klasse_id 4 Sabrina Otto 2007-05-19 2 3 Mahmud Al'hissi 2008-06-30 1 2 Margot M\u00fcller 2008-11-19 2 5 Ayse \u00dcn\u00fcl 2008-12-12 2 1 Paul Weber 2009-07-12 1","title":"Ergebnis:"},{"location":"order/#befehl_1","text":"SELECT * FROM schueler ORDER BY geburtsdatum DESC","title":"Befehl"},{"location":"order/#ergebnis_1","text":"id vorname nachname geburtsdatum klasse_id 1 Paul Weber 2009-07-12 1 5 Ayse \u00dcn\u00fcl 2008-12-12 2 2 Margot M\u00fcller 2008-11-19 2 3 Mahmud Al'hissi 2008-06-30 1 4 Sabrina Otto 2007-05-19 2","title":"Ergebnis:"},{"location":"select/","text":"SELECT Einzelne Spalte ausgeben SELECT spaltenname FROM tabellenname Mit diesem Befehl werden alle Zeilen der Spalte \"spaltenname\" aus der Tabelle \"tabellenname\" ausgegeben. Beispiel Befehl: SELECT vorname FROM schueler Ergebnis: vorname Paul Margot Mahmud Sabrina Ayse Gezielt mehrere Spalten ausgeben SELECT spaltenname_1, spaltenname_2,...,spaltenname_n FROM tabellenname Hiermit k\u00f6nnen mehrere Spalten einer Tabelle angezeigt werden. Es werden immer alle Zeilen der selektierten Spalten angezeigt. Beispiel Befehl: SELECT id, vorname FROM schueler Ergebnis: id vorname 1 Paul 2 Margot 3 Mahmud 4 Sabrina 5 Ayse Alle Spalten ausgeben SELECT * FROM tabellenname Mit diesem Befehl werden alle Zeilen aller Spalten der Tabelle angezeigt. Beispiel Befehl: SELECT * FROM schueler Ergebnis: id vorname nachname geburtsdatum klasse_id 1 Paul Weber 2009-07-12 1 2 Margot M\u00fcller 2008-11-19 2 3 Mahmud Al'hissi 2008-06-30 1 4 Sabrina Otto 2007-05-19 2 5 Ayse \u00dcn\u00fcl 2008-12-12 2","title":"SELECT"},{"location":"select/#select","text":"","title":"SELECT"},{"location":"select/#einzelne-spalte-ausgeben","text":"SELECT spaltenname FROM tabellenname Mit diesem Befehl werden alle Zeilen der Spalte \"spaltenname\" aus der Tabelle \"tabellenname\" ausgegeben.","title":"Einzelne Spalte ausgeben"},{"location":"select/#beispiel","text":"","title":"Beispiel"},{"location":"select/#befehl","text":"SELECT vorname FROM schueler","title":"Befehl:"},{"location":"select/#ergebnis","text":"vorname Paul Margot Mahmud Sabrina Ayse","title":"Ergebnis:"},{"location":"select/#gezielt-mehrere-spalten-ausgeben","text":"SELECT spaltenname_1, spaltenname_2,...,spaltenname_n FROM tabellenname Hiermit k\u00f6nnen mehrere Spalten einer Tabelle angezeigt werden. Es werden immer alle Zeilen der selektierten Spalten angezeigt.","title":"Gezielt mehrere Spalten ausgeben"},{"location":"select/#beispiel_1","text":"","title":"Beispiel"},{"location":"select/#befehl_1","text":"SELECT id, vorname FROM schueler","title":"Befehl:"},{"location":"select/#ergebnis_1","text":"id vorname 1 Paul 2 Margot 3 Mahmud 4 Sabrina 5 Ayse","title":"Ergebnis:"},{"location":"select/#alle-spalten-ausgeben","text":"SELECT * FROM tabellenname Mit diesem Befehl werden alle Zeilen aller Spalten der Tabelle angezeigt.","title":"Alle Spalten ausgeben"},{"location":"select/#beispiel_2","text":"","title":"Beispiel"},{"location":"select/#befehl_2","text":"SELECT * FROM schueler","title":"Befehl:"},{"location":"select/#ergebnis_2","text":"id vorname nachname geburtsdatum klasse_id 1 Paul Weber 2009-07-12 1 2 Margot M\u00fcller 2008-11-19 2 3 Mahmud Al'hissi 2008-06-30 1 4 Sabrina Otto 2007-05-19 2 5 Ayse \u00dcn\u00fcl 2008-12-12 2","title":"Ergebnis:"},{"location":"update/","text":"UPDATE einen Wert f\u00fcr alle Datens\u00e4tze \u00e4ndern UPDATE tabellenname SET spaltenname = <neuerWert> oder UPDATE tabellenname SET spaltenname = <neuerWert> WHERE spaltenname <Operator> <Wert> Mit dem UPDATE Befehl k\u00f6nnen alle oder einzelne Eintr\u00e4ge in einer Tabelle ver\u00e4ndert werden. Beispiel: Tabelle 1: schueler id vorname nachname geburtsdatum klasse_id fehltage 1 Paul Weber 2009-07-12 1 25 2 Margot M\u00fcller 2008-11-19 2 5 3 Mahmud Al'hissi 2008-06-30 1 6 4 Sabrina Otto 2007-05-19 2 0 5 Ayse \u00dcn\u00fcl 2008-12-12 2 3 Befehl UPDATE schueler SET fehltage = 0 Mit diesem Befehl werden die Fehltage aller Sch\u00fcler auf 0 zur\u00fcckgesetzt. Dies k\u00f6nnte am Ende eines Schuljahres sinnvoll sein. Ergebnis: id vorname nachname geburtsdatum klasse_id fehltage 1 Paul Weber 2009-07-12 1 0 2 Margot M\u00fcller 2008-11-19 2 0 3 Mahmud Al'hissi 2008-06-30 1 0 4 Sabrina Otto 2007-05-19 2 0 5 Ayse \u00dcn\u00fcl 2008-12-12 2 0 einen Wert f\u00fcr bestimmte Datens\u00e4tze \u00e4ndern UPDATE tabellenname SET spaltenname = <neuerWert> WHERE spaltenname <Operator> <Wert> Mit dem UPDATE Befehl k\u00f6nnen gezielt Eintr\u00e4ge in der Datenbank ver\u00e4ndert werden. Die zu \u00e4ndernden Eintr\u00e4ge k\u00f6nnen mit Hilfe von WHERE und einer passenden Bedingung gew\u00e4hlt werden. Beispiel: Tabelle 1: schueler id vorname nachname geburtsdatum klasse_id fehltage 1 Paul Weber 2009-07-12 1 25 2 Margot M\u00fcller 2008-11-19 2 5 3 Mahmud Al'hissi 2008-06-30 1 6 4 Sabrina Otto 2007-05-19 2 0 5 Ayse \u00dcn\u00fcl 2008-12-12 2 3 Befehl UPDATE schueler SET klasse_id = 3 WHERE klasse_id = 2 Mit diesem Befehl werden alle Sch\u00fcler*innen die, die klasse_id = 2 haben (Zweitkl\u00e4ssler) in die 3. Klasse versetzt (klasse_id = 3). Ergebnis: id vorname nachname geburtsdatum klasse_id fehltage 1 Paul Weber 2009-07-12 1 25 2 Margot M\u00fcller 2008-11-19 3 5 3 Mahmud Al'hissi 2008-06-30 1 6 4 Sabrina Otto 2007-05-19 3 0 5 Ayse \u00dcn\u00fcl 2008-12-12 3 3","title":"UPDATE"},{"location":"update/#update","text":"","title":"UPDATE"},{"location":"update/#einen-wert-fur-alle-datensatze-andern","text":"UPDATE tabellenname SET spaltenname = <neuerWert> oder UPDATE tabellenname SET spaltenname = <neuerWert> WHERE spaltenname <Operator> <Wert> Mit dem UPDATE Befehl k\u00f6nnen alle oder einzelne Eintr\u00e4ge in einer Tabelle ver\u00e4ndert werden.","title":"einen Wert f\u00fcr alle Datens\u00e4tze \u00e4ndern"},{"location":"update/#beispiel","text":"Tabelle 1: schueler id vorname nachname geburtsdatum klasse_id fehltage 1 Paul Weber 2009-07-12 1 25 2 Margot M\u00fcller 2008-11-19 2 5 3 Mahmud Al'hissi 2008-06-30 1 6 4 Sabrina Otto 2007-05-19 2 0 5 Ayse \u00dcn\u00fcl 2008-12-12 2 3","title":"Beispiel:"},{"location":"update/#befehl","text":"UPDATE schueler SET fehltage = 0 Mit diesem Befehl werden die Fehltage aller Sch\u00fcler auf 0 zur\u00fcckgesetzt. Dies k\u00f6nnte am Ende eines Schuljahres sinnvoll sein.","title":"Befehl"},{"location":"update/#ergebnis","text":"id vorname nachname geburtsdatum klasse_id fehltage 1 Paul Weber 2009-07-12 1 0 2 Margot M\u00fcller 2008-11-19 2 0 3 Mahmud Al'hissi 2008-06-30 1 0 4 Sabrina Otto 2007-05-19 2 0 5 Ayse \u00dcn\u00fcl 2008-12-12 2 0","title":"Ergebnis:"},{"location":"update/#einen-wert-fur-bestimmte-datensatze-andern","text":"UPDATE tabellenname SET spaltenname = <neuerWert> WHERE spaltenname <Operator> <Wert> Mit dem UPDATE Befehl k\u00f6nnen gezielt Eintr\u00e4ge in der Datenbank ver\u00e4ndert werden. Die zu \u00e4ndernden Eintr\u00e4ge k\u00f6nnen mit Hilfe von WHERE und einer passenden Bedingung gew\u00e4hlt werden.","title":"einen Wert f\u00fcr bestimmte Datens\u00e4tze \u00e4ndern"},{"location":"update/#beispiel_1","text":"Tabelle 1: schueler id vorname nachname geburtsdatum klasse_id fehltage 1 Paul Weber 2009-07-12 1 25 2 Margot M\u00fcller 2008-11-19 2 5 3 Mahmud Al'hissi 2008-06-30 1 6 4 Sabrina Otto 2007-05-19 2 0 5 Ayse \u00dcn\u00fcl 2008-12-12 2 3","title":"Beispiel:"},{"location":"update/#befehl_1","text":"UPDATE schueler SET klasse_id = 3 WHERE klasse_id = 2 Mit diesem Befehl werden alle Sch\u00fcler*innen die, die klasse_id = 2 haben (Zweitkl\u00e4ssler) in die 3. Klasse versetzt (klasse_id = 3).","title":"Befehl"},{"location":"update/#ergebnis_1","text":"id vorname nachname geburtsdatum klasse_id fehltage 1 Paul Weber 2009-07-12 1 25 2 Margot M\u00fcller 2008-11-19 3 5 3 Mahmud Al'hissi 2008-06-30 1 6 4 Sabrina Otto 2007-05-19 3 0 5 Ayse \u00dcn\u00fcl 2008-12-12 3 3","title":"Ergebnis:"},{"location":"where/","text":"WHERE Vergleichsoperatoren Operator Beschreibung Beispiel = gleich nachname = 'Weber' <> ungleich id <> 2 >= gr\u00f6\u00dfer gleich id >= 2 <= kleiner gleich id <= 3 < kleiner id < 3 > gr\u00f6\u00dfer id > 2 BETWEEN Wert innerhalb einer Spanne id BETWEEN 2 AND 4 LIKE Beinhaltet einen Text; Platzhalter: % vorname LIKE 'Ma%' IN ist Teil einer Auflistung vorname IN ('Paul', 'Margot') Ausgabe einfach filtern SELECT * FROM tabellenname WHERE spaltenname <Operator> <Wert> Mit diesem Befehl werden alle Eintr\u00e4ge der Tabelle angezeigt, bei welchen das Ergebnis der Bedingung wahr ist. Beispiele: Befehl spaltenname : klasse_id Operator : = Wert : 1 SELECT * FROM schueler WHERE klasse_id = 1 Ergebnis: id vorname nachname geburtsdatum klasse_id 1 Paul Weber 2009-07-12 1 3 Mahmud Al'hissi 2008-06-30 1 Befehl spaltenname : geburtsdatum Operator : <= Wert : 2008-06-30 SELECT * FROM schueler WHERE geburtsdatum <= '2008-06-30' Ergebnis: id vorname nachname geburtsdatum klasse_id 3 Mahmud Al'hissi 2008-06-30 1 4 Sabrina Otto 2007-05-19 2 Befehl spaltenname : vorname Operator : LIKE Wert : Ma% SELECT * FROM schueler WHERE vorname LIKE 'Ma%' Ergebnis: id vorname nachname geburtsdatum klasse_id 2 Margot M\u00fcller 2008-11-19 2 3 Mahmud Al'hissi 2008-06-30 1 Befehl spaltenname : nachname Operator : IN Wert : ('M\u00fcller', '\u00dcn\u00fcl') SELECT * FROM schueler WHERE nachname IN ('M\u00fcller', '\u00dcn\u00fcl') Ergebnis: id vorname nachname geburtsdatum klasse_id 2 Margot M\u00fcller 2008-11-19 2 5 Ayse \u00dcn\u00fcl 2008-12-12 2 Verkn\u00fcpfungsoperatoren Operator Beschreibung Beispiel AND verkn\u00fcpft zwei Bedingungen mit UND nachname = 'Weber' AND klasse_id = '2' OR verkn\u00fcpft zwei Bedingungen mit ODER nachname = 'Weber' OR nachname = '\u00dcn\u00fcl' NOT invertiert das Ergebnis einer Bedingung NOT nachname = 'Weber' Ausgabe mehrfach filtern SELECT * FROM tabellenname WHERE spaltenname_1 <Vergleichsoperator_1> <Wert_1> <Verkn\u00fcpfungsoperator> spaltenname_2 <Vergleichsperator_2> <Wert_2> Mit diesem Befehl werden alle Eintr\u00e4ge der Tabelle angezeigt, bei welchen das Ergebnis der verkn\u00fcpften Bedingung wahr ist. Beispiele: Befehl spaltenname1 : klasse_id Operator1 : = Wert1 : 1 spaltenname2 : vorname Operator2 : LIKE Wert2 : 'Ma%' SELECT * FROM schueler WHERE klasse_id = 1 AND vorname LIKE 'Ma%' Ergebnis: id vorname nachname geburtsdatum klasse_id 3 Mahmud Al'hissi 2008-06-30 1","title":"WHERE"},{"location":"where/#where","text":"","title":"WHERE"},{"location":"where/#vergleichsoperatoren","text":"Operator Beschreibung Beispiel = gleich nachname = 'Weber' <> ungleich id <> 2 >= gr\u00f6\u00dfer gleich id >= 2 <= kleiner gleich id <= 3 < kleiner id < 3 > gr\u00f6\u00dfer id > 2 BETWEEN Wert innerhalb einer Spanne id BETWEEN 2 AND 4 LIKE Beinhaltet einen Text; Platzhalter: % vorname LIKE 'Ma%' IN ist Teil einer Auflistung vorname IN ('Paul', 'Margot')","title":"Vergleichsoperatoren"},{"location":"where/#ausgabe-einfach-filtern","text":"SELECT * FROM tabellenname WHERE spaltenname <Operator> <Wert> Mit diesem Befehl werden alle Eintr\u00e4ge der Tabelle angezeigt, bei welchen das Ergebnis der Bedingung wahr ist.","title":"Ausgabe einfach filtern"},{"location":"where/#beispiele","text":"","title":"Beispiele:"},{"location":"where/#befehl","text":"spaltenname : klasse_id Operator : = Wert : 1 SELECT * FROM schueler WHERE klasse_id = 1","title":"Befehl"},{"location":"where/#ergebnis","text":"id vorname nachname geburtsdatum klasse_id 1 Paul Weber 2009-07-12 1 3 Mahmud Al'hissi 2008-06-30 1","title":"Ergebnis:"},{"location":"where/#befehl_1","text":"spaltenname : geburtsdatum Operator : <= Wert : 2008-06-30 SELECT * FROM schueler WHERE geburtsdatum <= '2008-06-30'","title":"Befehl"},{"location":"where/#ergebnis_1","text":"id vorname nachname geburtsdatum klasse_id 3 Mahmud Al'hissi 2008-06-30 1 4 Sabrina Otto 2007-05-19 2","title":"Ergebnis:"},{"location":"where/#befehl_2","text":"spaltenname : vorname Operator : LIKE Wert : Ma% SELECT * FROM schueler WHERE vorname LIKE 'Ma%'","title":"Befehl"},{"location":"where/#ergebnis_2","text":"id vorname nachname geburtsdatum klasse_id 2 Margot M\u00fcller 2008-11-19 2 3 Mahmud Al'hissi 2008-06-30 1","title":"Ergebnis:"},{"location":"where/#befehl_3","text":"spaltenname : nachname Operator : IN Wert : ('M\u00fcller', '\u00dcn\u00fcl') SELECT * FROM schueler WHERE nachname IN ('M\u00fcller', '\u00dcn\u00fcl')","title":"Befehl"},{"location":"where/#ergebnis_3","text":"id vorname nachname geburtsdatum klasse_id 2 Margot M\u00fcller 2008-11-19 2 5 Ayse \u00dcn\u00fcl 2008-12-12 2","title":"Ergebnis:"},{"location":"where/#verknupfungsoperatoren","text":"Operator Beschreibung Beispiel AND verkn\u00fcpft zwei Bedingungen mit UND nachname = 'Weber' AND klasse_id = '2' OR verkn\u00fcpft zwei Bedingungen mit ODER nachname = 'Weber' OR nachname = '\u00dcn\u00fcl' NOT invertiert das Ergebnis einer Bedingung NOT nachname = 'Weber'","title":"Verkn\u00fcpfungsoperatoren"},{"location":"where/#ausgabe-mehrfach-filtern","text":"SELECT * FROM tabellenname WHERE spaltenname_1 <Vergleichsoperator_1> <Wert_1> <Verkn\u00fcpfungsoperator> spaltenname_2 <Vergleichsperator_2> <Wert_2> Mit diesem Befehl werden alle Eintr\u00e4ge der Tabelle angezeigt, bei welchen das Ergebnis der verkn\u00fcpften Bedingung wahr ist.","title":"Ausgabe mehrfach filtern"},{"location":"where/#beispiele_1","text":"","title":"Beispiele:"},{"location":"where/#befehl_4","text":"spaltenname1 : klasse_id Operator1 : = Wert1 : 1 spaltenname2 : vorname Operator2 : LIKE Wert2 : 'Ma%' SELECT * FROM schueler WHERE klasse_id = 1 AND vorname LIKE 'Ma%'","title":"Befehl"},{"location":"where/#ergebnis_4","text":"id vorname nachname geburtsdatum klasse_id 3 Mahmud Al'hissi 2008-06-30 1","title":"Ergebnis:"}]}